- hosts: bastion
  vars:
    skip_phase: 0
    temp_dir: "../gi-temp"
    registry_version: "2.7.1"
    matchbox_version: "v0.9.0"
    rook_operator_version: "v1.8.2"
    rook_ceph_version: "v16.2.7"
    ics_versions: [ "3.7.4","3.8.1","3.9.1","3.10.0","3.11.0","3.12.1","3.13.0", "3.14.2", "3.15.1", "3.16.3"]
    ics_cases: [ "ibm-cp-common-services-1.3.4.tgz","ibm-cp-common-services-1.4.1.tgz","ibm-cp-common-services-1.5.1.tgz","ibm-cp-common-services-1.6.0.tgz","ibm-cp-common-services-1.7.0.tgz","ibm-cp-common-services-1.8.1.tgz","ibm-cp-common-services-1.9.0.tgz", "ibm-cp-common-services-1.10.2.tgz", "ibm-cp-common-services-1.11.1.tgz", "ibm-cp-common-services-1.12.3.tgz" ]
    ics_operator_namespace: "common-service"
    ics_case_name: "ibm-cp-common-services"
    ics_case_inventory_setup: "ibmCommonServiceOperatorSetup"
    gi_versions: [ "3.0.0","3.0.1","3.0.2","3.1.0","3.1.2", "3.1.3", "3.1.4", "3.1.5" ]
    gi_cases: [ 'ibm-guardium-insights-2.0.0.tgz','ibm-guardium-insights-2.0.1.tgz','ibm-guardium-insights-2.0.2.tgz','ibm-guardium-insights-2.1.0.tgz','ibm-guardium-insights-2.1.2.tgz', 'ibm-guardium-insights-2.1.3.tgz', 'ibm-guardium-insights-2.1.4.tgz', 'ibm-guardium-insights-2.1.5.tgz' ]
    gi_case_inventory_setup: "install"
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    install_ldap: "{{ lookup('env','GI_INSTALL_LDAP') }}"
    ssh_key: "{{ lookup('env','GI_SSH_KEY') }}"
    bas_ip: "{{ lookup('env','GI_BASTION_IP') }}"
    ntp_server: "{{ lookup('env','GI_NTP_SRV') }}"
    ocp_release: "{{ lookup('env','GI_OCP_RELEASE') }}"
    ocp_major_release: "{{ ocp_release.split('.')[:-1]|join('.') }}"
    ocp_minor_release: "{{ ocp_release.split('.')[-1] }}"
    boot_mac: "{{ lookup('env','GI_BOOTSTRAP_MAC_ADDRESS') }}"
    is_master_only: "{{ lookup('env','GI_MASTER_ONLY') }}"
    is_ocs_tainted: "{{ lookup('env','GI_OCS_TAINTED') }}"
    boot_disk: "{{ lookup('env','GI_BOOT_DEVICE') }}"
    boot_ip: "{{ lookup('env','GI_BOOTSTRAP_IP') }}"
    bas_int: "{{ lookup('env','GI_NETWORK_INTERFACE') }}"
    dns_forwarder: "{{ lookup('env','GI_DNS_FORWARDER') }}"
    bas_name: "{{ lookup('env','GI_BASTION_NAME') }}"
    boot_name: "{{ lookup('env','GI_BOOTSTRAP_NAME') }}"
    ocp_ext_ingress: "{{ lookup('env','GI_OCP_IN') }}"
    cluster_network: "{{ lookup('env','GI_OCP_CIDR') }}"
    cluster_network_subnet:  "{{ lookup('env','GI_OCP_CIDR_MASK') }}"
    ocadmin: "{{ lookup('env','GI_OCADMIN') }}"
    ocadmin_password: "{{ lookup('env','GI_OCADMIN_PWD') }}"
    storage_type: "{{ lookup('env','GI_STORAGE_TYPE') }}"
    storage_device: "{{ lookup('env','GI_STORAGE_DEVICE') }}"
    storage_device_size: "{{ lookup('env','GI_STORAGE_DEVICE_SIZE') }}"
    install_gi: "{{ lookup('env','GI_INSTALL_GI') }}"
    install_ics: "{{ lookup('env','GI_ICS') }}"
    one_subnet: "{{ lookup('env','GI_ONE_SUBNET') }}"


  tasks:
    - name: Check standard configuration parameters
      fail: msg="Variable {{ item.name }} is not set"
      when: item.value == ""
      loop:
        - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
        - { name: "GI_DOMAIN", value: "{{ domain }}" }
        - { name: "GI_INSTALL_LDAP", value: "{{ install_ldap }}" }
        - { name: "GI_SSH_KEY", value: "{{ ssh_key }}" }
        - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }
        - { name: "GI_NTP_SRV", value: "{{ ntp_server }}" }
        - { name: "GI_OCP_RELEASE", value: "{{ ocp_release }}" }
        - { name: "GI_BOOTSTRAP_MAC_ADDRESS", value: "{{ boot_mac }}" }
        - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
        - { name: "GI_OCS_TAINTED", value: "{{ is_ocs_tainted }}" }
        - { name: "GI_BOOT_DEVICE", value: "{{ boot_disk }}" }
        - { name: "GI_BOOTSTRAP_IP", value: "{{ boot_ip }}" }
        - { name: "GI_NETWORK_INTERFACE", value: "{{ bas_int }}" }
        - { name: "GI_DNS_FORWARDER", value: "{{ dns_forwarder }}" }
        - { name: "GI_BASTION_NAME", value: "{{ bas_name }}" }
        - { name: "GI_BOOTSTRAP_NAME", value: "{{ boot_name }}" }
        - { name: "GI_OCP_IN", value: "{{ ocp_ext_ingress }}" }
        - { name: "GI_OCP_CIDR", value: "{{ cluster_network }}" }
        - { name: "GI_OCP_CIDR_MASK", value: "{{ cluster_network_subnet }}" }
        - { name: "GI_OCADMIN", value: "{{ ocadmin }}" }
        - { name: "GI_OCADMIN_PWD", value: "{{ ocadmin_password }}" }
        - { name: "GI_STORAGE_TYPE", value: "{{ storage_type }}" }
        - { name: "GI_STORAGE_DEVICE", value: "{{ storage_device }}" }
        - { name: "GI_STORAGE_DEVICE_SIZE", value: "{{ storage_device_size }}" }
        - { name: "GI_INSTALL_GI", value: "{{ install_gi }}" }
        - { name: "GI_ICS", value: "{{ install_ics }}" }
        - { name: "GI_ONE_SUBNET", value: "{{ one_subnet }}" }

    - name: Set parameters for one subnet installation
      set_fact:
        dhcp_range_start: "{{ lookup('env','GI_DHCP_RANGE_START') }}"
        dhcp_range_stop: "{{ lookup('env','GI_DHCP_RANGE_STOP') }}"
        bas_gw: "{{ lookup('env','GI_GATEWAY') }}"
      when: one_subnet == 'Y'

    - name: Check configuration parameters for one subnet installation
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_DHCP_RANGE_START", value: "{{ dhcp_range_start }}" }
        - { name: "GI_DHCP_RANGE_STOP", value: "{{ dhcp_range_stop }}" }
        - { name: "GI_GATEWAY", value: "{{ bas_gw }}" }
      when: one_subnet == 'Y' and item.value == ""

    - name: Set parameters for multiple subnets installation
      set_fact:
        gateways_list: "{{ lookup('env','GI_SUBNETS_GATEWAYS').split(',') }}"
        dhcp_ranges_list: "{{ lookup('env','GI_SUBNETS_IP_RANGES').split(',') }}"
      when: one_subnet == 'N'

    - name: Check configuration parameters for multiple subnets installation
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_SUBNETS_GATEWAYS", value: "{{ gateways_list }}" }
        - { name: "GI_SUBNETS_IP_RANGES", value: "{{ dhcp_ranges_list }}" }
      when: one_subnet == 'N' and item.value == ""

    - name: Set parameters for air-gapped installation
      set_fact:
        archives_dir:  "{{ lookup('env','GI_ARCHIVES_DIR') }}"
        repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
        repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
      when: internet_type == 'A'

    - name: Check configuration parameters for air-gapped installation
      fail: msg="Variable {{ item.name }} is not set"
      when: internet_type == 'A' and item.value == ""
      loop:
        - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
        - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
        - { name: "GI_ARCHIVES_DIR", value: "{{ archives_dir }}" }

    - name: Set masters array
      set_fact:
        master_ip: "{{ lookup('env', 'GI_MASTER_IP').split(',') }}"
        master_mac: "{{ lookup('env', 'GI_MASTER_MAC_ADDRESS').split(',') }}"
        master_name: "{{ lookup('env', 'GI_MASTER_NAME').split(',') }}"

    - name: Check master configuration
      fail: msg="Variable {{ item.name }} is not set"
      when: item.value == ""
      loop:
        - { name: "GI_MASTER_IP", value: "{{ master_ip }}" }
        - { name: "GI_MASTER_MAC_ADDRESS", value: "{{ master_mac }}" }
        - { name: "GI_MASTER_NAME", value: "{{ master_name }}" }
          
    - name: Set OCS array
      set_fact:
        ocs_ip: "{{ lookup('env', 'GI_OCS_IP').split(',') }}"
        ocs_mac: "{{ lookup('env', 'GI_OCS_MAC_ADDRESS').split(',') }}"
        ocs_name: "{{ lookup('env', 'GI_OCS_NAME').split(',') }}"
      when: is_ocs_tainted == 'Y'

    - name: Check OCS configuration
      fail: msg="Variable {{ item.name }} is not set"
      when: is_ocs_tainted == 'Y' and item.value == ""
      loop:
        - { name: "GI_OCS_IP", value: "{{ ocs_ip }}" }
        - { name: "GI_OCS_MAC_ADDRESS", value: "{{ ocs_mac }}" }
        - { name: "GI_OCS_NAME", value: "{{ ocs_name }}" }

    - name: Set workers arrays
      set_fact:
        worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
        worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
        worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
      when: is_master_only == 'N'

    - name: Check workers configuration
      fail: msg="Variable {{ item.name }} is not set"
      when: is_master_only == 'N' and item.value == ""
      loop:
        - { name: "GI_WORKER_IP", value: "{{ worker_ip }}" }
        - { name: "GI_WORKER_MAC_ADDRESS", value: "{{ worker_mac }}" }
        - { name: "GI_WORKER_NAME", value: "{{ worker_name }}" }

    - name: Iterates all workers in one array
      set_fact:
        nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
        ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"

    - name: Set ICS installation variables from env
      set_fact:
        ics_ext_ingress: "{{ lookup('env','GI_ICS_IN') }}"
        ics_version_hint: "{{ lookup('env','GI_ICS_VERSION') }}"
        ics_operands: "{{ lookup('env', 'GI_ICS_OPERANDS').split(',') }}"
        ics_dedicated_nodes: "{{ lookup('env', 'GI_ICS_NODES').split(',') }}"
        ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
      when: install_ics == 'Y' 

    - name: Check ICS variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_ICS_IN", value: "{{ ics_ext_ingress }}" }
        - { name: "GI_ICS_VERSION", value: "{{ ics_version_hint }}" }
        - { name: "GI_ICS_OPERANDS", value: "{{ ics_operands }}" }
        - { name: "GI_ICS_NODES", value: "{{ ics_dedicated_nodes }}" }
        - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      when: install_ics == 'Y' and item.value == ""

    - name: Set GI installation variables from env
      set_fact:
        gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
        gi_size:  "{{ lookup('env','GI_SIZE_GI') }}"
        gi_dedicated_nodes: "{{ lookup('env', 'GI_GI_NODES').split(',') }}"
        gi_namespace: "{{ lookup('env','GI_NAMESPACE_GI') }}"
        db2_enc_hint: "{{ lookup('env','GI_DB2_ENCRYPTED') }}"
        db2_nodes_array: "{{ lookup('env','GI_DB2_NODES').split(',') }}"
        db2_tainted: "{{ lookup('env','GI_DB2_TAINTED') }}"
        gi_ext_ingress: "{{ lookup('env','GI_IN') }}"
        gi_deployment_size: "{{ lookup('env','GI_SIZE_GI') }}"
        stap_supp: "{{ lookup('env','GI_STAP_STREAMING') }}"
        gi_ds_size: "{{ lookup('env','GI_DATA_STORAGE_SIZE') }}"
        gi_meta_size: "{{ lookup('env','GI_METADATA_STORAGE_SIZE') }}"
        gi_logs_size: "{{ lookup('env','GI_ACTIVELOGS_STORAGE_SIZE') }}"
        gi_mongo_size: "{{ lookup('env','GI_MONGO_DATA_STORAGE_SIZE') }}"
        gi_mongo_meta_size:  "{{ lookup('env','GI_MONGO_METADATA_STORAGE_SIZE') }}"
        gi_kafka_size: "{{ lookup('env','GI_KAFKA_STORAGE_SIZE') }}"
        gi_zookeeper_size:  "{{ lookup('env','GI_ZOOKEEPER_STORAGE_SIZE') }}"
        gi_ssh_host: "{{ lookup('env','GI_SSH_HOST') }}"
        gi_ssh_port: "{{ lookup('env','GI_SSH_PORT') }}"
      when: install_gi == 'Y'

    - name: Check GI variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
        - { name: "GI_SIZE_GI", value: "{{ gi_size }}" }
        - { name: "GI_GI_NODES", value: "{{ gi_dedicated_nodes }}" }
        - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }
        - { name: "GI_DB2_ENCRYPTED", value: "{{ db2_enc_hint }}" }
        - { name: "GI_DB2_TAINTED", value: "{{ db2_tainted }}" }
        - { name: "GI_DB2_NODES", value: "{{ db2_nodes_array }}" }
        - { name: "GI_IN", value: "{{ gi_ext_ingress }}" }
        - { name: "GI_SIZE_GI", value: "{{ gi_deployment_size }}" }
        - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
        - { name: "GI_STAP_STREAMING", value: "{{ stap_supp }}" }
        - { name: "GI_IN", value: "{{ gi_ext_ingress }}" }
        - { name: "GI_DATA_STORAGE_SIZE", value: "{{ gi_ds_size }}" }
        - { name: "GI_METADATA_STORAGE_SIZE", value: "{{ gi_meta_size }}" }
        - { name: "GI_ACTIVELOGS_STORAGE_SIZE", value: "{{ gi_logs_size }}" }
        - { name: "GI_MONGO_DATA_STORAGE_SIZE", value: "{{ gi_mongo_size }}" }
        - { name: "GI_MONGO_METADATA_STORAGE_SIZE", value: "{{ gi_mongo_meta_size }}" }
        - { name: "GI_KAFKA_STORAGE_SIZE", value: "{{ gi_kafka_size }}" }
        - { name: "GI_ZOOKEEPER_STORAGE_SIZE", value: "{{ gi_zookeeper_size }}" }
        - { name: "GI_SSH_HOST", value: "{{ gi_ssh_host }}" }
        - { name: "GI_SSH_PORT", value: "{{ gi_ssh_port }}" }
      when: install_gi == 'Y' and item.value == ""

    - name: Set GI installation variables from env
      set_fact:
        ldap_domain: "{{ lookup('env','GI_LDAP_DOMAIN') }}"
        ldap_password: "{{ lookup('env','GI_LDAP_USERS_PWD') }}"
        ldap_users: "{{ lookup('env','GI_LDAP_USERS').split(',') }}"
        ldap_users_raw: "{{ lookup('env','GI_LDAP_USERS') }}"
        ldap_depl_type: "{{ lookup('env','GI_LDAP_DEPLOYMENT') }}"
      when: install_ldap == 'Y'

    - name: Check GI variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_LDAP_DOMAIN", value: "{{ ldap_domain }}" }
        - { name: "GI_LDAP_USERS_PWD", value: "{{ ldap_password }}" }
        - { name: "GI_LDAP_USERS", value: "{{ ldap_users }}" }
        - { name: "GI_LDAP_DEPLOYMENT", value: "{{ ldap_depl_type }}" }
      when: install_ldap == 'Y' and item.value == ""

    - name: Set OCS nodes list
      set_fact:
        ocs_nodes: "{{ lookup('env', 'GI_OCS_NODES').split(',') }}"
      when: storage_type == 'O' and is_ocs_tainted == 'N'

    - name: Check OCS nodes list
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCS_NODES", value: "{{ ocs_nodes }}" }
      when: storage_type == 'O' and is_ocs_tainted == 'N' and item.value == ""

    - name: Set parameters for non air-gapped installation
      set_fact:
        ibm_secret:  "{{ lookup('env','GI_IBM_SECRET') }}"
      when: install_gi == 'Y' and internet_type != 'A'

    - name: Check configuration parameters for non air-gapped installation
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_IBM_SECRET", value: "{{ ibm_secret }}" }
      when: internet_type != 'A' and install_gi == 'Y' and item.value == ""

    - name: Set OCP ingress cert variables
      set_fact:
        ocp_ca: "{{ lookup('env', 'GI_OCP_IN_CA') }}"
        ocp_cert: "{{ lookup('env', 'GI_OCP_IN_CERT') }}"
        ocp_key: "{{ lookup('env', 'GI_OCP_IN_KEY') }}"
      when: ocp_ext_ingress == 'Y'

    - name: Check OCP ingress cert variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_OCP_IN_CA", value: "{{ ocp_ca }}" }
        - { name: "GI_OCP_IN_CERT", value: "{{ ocp_cert }}" }
        - { name: "GI_OCP_IN_KEY", value: "{{ ocp_key }}" }
      when: ocp_ext_ingress == 'Y' and item.value == ""

    - name: Set endpoint cert variables
      set_fact:
        ics_ca: "{{ lookup('env', 'GI_ICS_IN_CA') }}"
        ics_cert: "{{ lookup('env', 'GI_ICS_IN_CERT') }}"
        ics_key: "{{ lookup('env', 'GI_ICS_IN_KEY') }}"
      when: install_ics == 'Y' and ics_ext_ingress == 'Y'

    - name: Check ICS endpoint cert variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_ICS_IN_CA", value: "{{ ics_ca }}" }
        - { name: "GI_ICS_IN_CERT", value: "{{ ics_cert }}" }
        - { name: "GI_ICS_IN_KEY", value: "{{ ics_key }}" }
      when: install_ics == 'Y' and ics_ext_ingress == 'Y' and item.value == ""

    - name: Set endpoint cert variables
      set_fact:
        gi_ca: "{{ lookup('env', 'GI_IN_CA') }}"
        gi_cert: "{{ lookup('env', 'GI_IN_CERT') }}"
        gi_key: "{{ lookup('env', 'GI_IN_KEY') }}"
      when: install_gi == 'Y' and gi_ext_ingress == 'Y'

    - name: Check ICS endpoint cert variables
      fail: msg="Variable {{ item.name }} is not set"
      loop:
        - { name: "GI_IN_CA", value: "{{ gi_ca }}" }
        - { name: "GI_IN_CERT", value: "{{ gi_cert }}" }
        - { name: "GI_IN_KEY", value: "{{ gi_key }}" }
      when: install_gi == 'Y' and gi_ext_ingress == 'Y' and item.value == ""

    - name: ICS size
      set_fact:
        ics_size_hint: "{{ 'S' if gi_size == 'values-dev' else 'M' }}"
      when: install_gi == 'Y'

    - name: ICS size
      set_fact:
        ics_size_hint: 'S'
      when: install_gi == 'N' #add possibility to select ICS size

    - name: Set ICS installation variables
      set_fact:
        ics_version: "{{ ics_versions[ics_version_hint|int] }}"
        ics_case: "{{ ics_cases[ics_version_hint|int] }}"
        ics_size: "{{ 'small' if ics_size_hint == 'S' else 'medium' if ics_size_hint == 'M' else 'large' }}"
        ics_registry: "{{ 'docker.io/ibmcom' if ics_version_hint|int < 7 else 'icr.io/cpopen' }}" #check when ICS supported changed
      when: install_ics == 'Y'

    - name: Set GI installation variables
      set_fact:
        gi_version: "{{ gi_versions[gi_version_index|int] }}"
        gi_case: "{{ gi_cases[gi_version_index|int] }}"
        db2_enc: "{{ 'YES' if db2_enc_hint == 'Y' else 'NO' }}"
        db2_nodes_list: "{{ db2_nodes_array|product([domain])|map('join','.')|join(',') }}"
        gi_license: "{{ 'L-TESX-C86NC4' if gi_version_index|int > 2 else 'L-OOLE-C2ASKR' }}"
        add_options1: "{{ ' -t false' if db2_tainted == 'N' else ' -t true' if db2_tainted == 'Y' else '' }}"
        add_options2: "{{ ' -c '+gi_ca+' -f '+gi_cert+' -k '+gi_key if gi_ext_ingress == 'Y' else '' }}"
        storage_class_fs: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' }}"
        storage_class_block: "{{ 'rook-ceph-block' if storage_type == 'R' else 'ocs-storagecluster-ceph-rbd' }}"
      when: install_gi == 'Y'

    - name: Set parameters for air-gapped installation
      set_fact:
        offline_inventory: "{{ 'gi_arch' if install_gi == 'Y' else 'ics_arch' }}"
        ics_manifest_dir: "{{ 'gi_offline' if install_gi == 'Y' else 'ics_offline' }}"
      when: install_ics == 'Y'

    - name: Set rook nodes
      set_fact:
        rook_dedicated_nodes: "{{ lookup('env', 'GI_ROOK_NODES').split(',') }}"
      when: storage_type == 'R'

    - name: Setup bastion
      include: stage1.yaml
      when: skip_phase|int < 1

    - debug:
        msg:
          - "Bastion prepared for OpenShift boot"
          - "Start all nodes and confirm that they are correctly booted, then push <ENTER> to continue"
      when: skip_phase|int < 1

    - pause:
        echo: no
        prompt: "Press ENTER to continue"
      when: skip_phase|int < 1

    - name: Wait for OCP boot phase ready
      include: stage2.yaml
      when: skip_phase|int < 2

    - name: Install rook-ceph
      include: rook_install.yaml
      when: skip_phase|int < 3 and storage_type == 'R'

    - name: Install OCP
      include: ocs_install.yaml
      when: skip_phase|int < 3 and storage_type == 'O'

    - name: Setup image registry
      include: image_registry_setup.yaml
      when: skip_phase|int < 3

    - name: Install ICS
      include: ics_install.yaml
      when: skip_phase|int < 4 and install_ics == 'Y'

    - name: Install GI
      include: gi_install.yaml
      when: skip_phase|int < 5 and install_gi == 'Y'

    - name: Install openldap
      include: openldap_install.yaml
      when: skip_phase|int < 6 and install_ldap == 'Y'

    - name: OCP info
      debug:
        msg:
          - "Openshift {{ ocp_release }} has been installed and configured"
          - "Add to hosts on your web browser workstation this line to login to OCP:"
          - "{{ bas_ip }} console-openshift-console.apps.{{ domain }} oauth-openshift.apps.{{ domain }}"
          - "Login to OCP console as {{ ocadmin }} user - https://console-openshift-console.apps.{{ domain }}"

    - name: ICS info
      debug:
        msg:
          - "IBM Common Services {{ ics_version }} installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} cp-console.apps.{{ domain }}"
          - "Login to ICS console as admin user - https://cp-console.apps.{{ domain }}"
          - "{{ 'LDAP instance registered in ICS with name openldap' if install_ldap == 'Y' else ''}}"
      when: install_ics == 'Y'

    - name: GI info
      debug:
        msg:
          - "GI {{ gi_version }} installation finished"
          - Update the hosts file on your web browser workstation
          - "{{ bas_ip }} insights.apps.{{ domain }}"
          - "Login to GI console as admin - https://insights.apps.{{ domain }}"
          - "{{ '' if skip_phase|int > 5 else 'SSH port '+ssh_node_port.stdout+' integration with GDP routed and opened on bastion' }}"
      when: install_gi == 'Y'

    - name: LDAP info
      debug:
        msg:
          - "Open LDAP installed"
          - "LDAP instance configured in ICS with name openldap"
      when: install_ldap == 'Y'

